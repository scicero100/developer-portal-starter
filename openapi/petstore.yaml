openapi: 3.0.3
servers:
  - url: https://qa-pxp-cagetransactions-api.azurewebsites.net/api/v1
info:
  description: >-
    This is an API reference for all internal Unity services
  version: 1.0.0
  title: Unity Internal Services
  contact:
    email: salvatore.cicero@pxpfinancial.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /vouchers: 
    get:
      summary: List all Cage Vouchers
      operationId: listVouchers
      tags:
        - Cage Transactions
      parameters:
        - name: site
          in: query
          description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
          required: true
          schema:
            type: string
            maxLength: 20
            example: "ACM-00000001"
        - name: voucherNumber
          in: query
          description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
          required: true
          schema:
            type: string
            maxLength: 50
            example: "1234567890"
      responses:
        200:
          description: An array of vouchers
          content:
            application/json:
              schema:
                type: object
                required:
                  - voucherNumber
                  - state
                  - stateMessage
                  - amount
                  - currency
                properties:
                  voucherNumber: 
                    type: string
                  state: 
                    type: string  
                  stateMessage: 
                    type: string  
                  amount: 
                    type: number
                  currency: 
                    type: string
                  paymentTypeAmounts:
                    $ref: "#/components/schemas/PaymentTypeAmounts"                    
                  shopper:
                    $ref: "#/components/schemas/VoucherShopper"
              examples: 
                Voucher Created:
                  value: 
                    voucherNumber: "1234567890"
                    state: "VoucherCreated"
                    stateMessage: "Voucher Created"
                    amount: 30.33
                    currency: USD
                    shopper:
                      id: "1ed768bb-e88a-4636-91ae-67927ccbb02b"
                      username: "JDoe"
                      firstName: "John"
                      lastName: "Doe"
                      dateOfBirth: "1982-07-12"
                      email: "john.doe@pxpfinancial.com"
                Voucher Paid:
                  value: 
                    voucherNumber: "1234567890"
                    state: "VoucherPaid"
                    stateMessage: "Voucher Paid"
                    amount: 30.33
                    currency: USD
                    paymentTypeAmounts:
                      cash: 10.2
                      cheque: 20.1
                      chips: 0
                      other: 0
                    shopper:
                      id: "1ed768bb-e88a-4636-91ae-67927ccbb02b"
                      username: "JDoe"
                      firstName: "John"
                      lastName: "Doe"
                      dateOfBirth: "1982-07-12"
                      email: "john.doe@pxpfinancial.com"
                Voucher Expired:
                  value: 
                    voucherNumber: "1234567890"
                    state: "VoucherExpired"                   
                    stateMessage: "Voucher Expired"
                    amount: 30.33
                    currency: USD
                    shopper:
                      id: "1ed768bb-e88a-4636-91ae-67927ccbb02b"
                      username: "JDoe"
                      firstName: "John"
                      lastName: "Doe"
                      dateOfBirth: "1982-07-12"
                      email: "john.doe@pxpfinancial.com"                   
    post:
      summary: Create a Cage Voucher
      operationId: createVoucher
      tags:
        - Cage Transactions   
      requestBody:
        description: Create a Cage Voucher
        required: true      
        content:
          application/json:
            schema:
              type: object
              required:
                - site
                - voucherNumber
                - amount
                - currency
                - shopper
              properties:
                site:
                  description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
                  type: string
                  example: "ACME-0000001"
                  maximum: 20
                voucherNumber:
                  type: string
                  description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial                   
                  example: "12345678907777"
                  maximum: 50
                amount:
                  type: number                
                  description: This is the amount of the transaction.  The numbers after the decimal will be zero padded if they are less than the expected currency exponent i.e. GBP 1.1 = GBP 1.10 OR EUR 1 = EUR 1.00 OR BHD 1.3 = 1.300  The transaction will be rejected if numbers after the decimal are greater than the expected currency exponent i.e. GBP 1.234 OR if a decimal is supplied when the currency of exponent does not require it i.e. JPY 1.0                
                  example: 30.33
                currency:
                  type: string
                  description: This is the currency of the transaction. This is the currency code. A  three character code in accordance with ISO 4217
                  example: "EUR"
                  minimum: 3
                  maximum: 3
                shopper:
                  $ref: "#/components/schemas/Shopper"
      responses:
        200:
          description: Voucher Created
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/VoucherResponse"               
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        400:
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  code:
                    type: string                
                    example: "INVALID_REQUEST"
                  reason:
                    type: string                
                    example: "One or more validation errors occurred"
                  details:
                    type: array
                    items: {}
                    example: "'$.voucherNumber' - The voucherNumber field is required"                    
  /deposits:  
    post:
      summary: Create a Cage Deposit
      operationId: createDeposit
      tags:
        - Cage Transactions
      requestBody:
        description: Create a Cage Deposit
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - site
                - amount
                - currency
                - shopper
                - paymentTypeAmounts
              properties:
                site:
                  description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
                  type: string
                  example: "ACME-0000001"
                  maximum: 20
                amount:
                  description: This is the amount of the transaction.  The numbers after the decimal will be zero padded if they are less than the expected currency exponent i.e. GBP 1.1 = GBP 1.10 OR EUR 1 = EUR 1.00 OR BHD 1.3 = 1.300  The transaction will be rejected if numbers after the decimal are greater than the expected currency exponent i.e. GBP 1.234 OR if a decimal is supplied when the currency of exponent does not require it i.e. JPY 1.0
                  type: number
                  example: 30.33
                currency:
                  description: This is the currency of the transaction. This is the currency code. A three character code in accordance with ISO 4217
                  type: string
                  example: "EUR"
                  minimum: 3
                  maximum: 3
                shopper:
                  type: object 
                  required:
                    - id
                  description: This is the unique identifier of the shopper
                  properties:
                    id:
                      type: string
                      example: "test_shopper_01"
                      maximum: 50
                paymentTypeAmounts:
                  $ref: "#/components/schemas/PaymentTypeAmounts"
      responses:
        200:
          description: Cage Deposit Approved
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/TransactionResponse"                  
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        400:
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  code:
                    type: string                
                    example: "INVALID_REQUEST"
                  reason:
                    type: string                
                    example: "One or more validation errors occurred"
                  details:
                    type: array
                    items: {}
                    example: "'$.voucherNumber' - The voucherNumber field is required"         
  /withdrawals:
    post:
      summary: Create a Cage Withdrawal
      operationId: createWithdrawal
      tags:
        - Cage Transactions
      requestBody:
        description: Create a Cage Withdrawal
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - site
                - voucherNumber
                - paymentTypeAmounts
              properties:
                site:
                  description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
                  type: string
                  example: "ACME-0000001"
                  maximum: 20
                voucherNumber:
                  description: This is the voucher number required by the shopper to make a withdrawal
                  type: string
                  example: "1234657890"
                  maximum: 50
                paymentTypeAmounts:
                  $ref: "#/components/schemas/PaymentTypeAmounts"
      responses:
        200:
          description: Cage Withdrawal Approved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        400:
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  code:
                    type: string                
                    example: "INVALID_REQUEST"
                  reason:
                    type: string                
                    example: "One or more validation errors occurred"
                  details:
                    type: array
                    items: {}
                    example: "'$.voucherNumber' - The voucherNumber field is required"                    
components:
  schemas:
    PaymentTypeAmounts:
      required:
        - cash
        - chip
        - cheque
        - other
      properties:
        cash:
          type: number
          example: 10.11
        chip:
          type: number
          example: 10.11
        cheque:
          type: number
          example: 10.11
        other: 
          type: number
          example: 0
    Shopper:
      required:
        - id
        - firstName
        - lastName
        - dateOfBirth
      properties:
        id:
          type: string          
          description: This is the unique identifier of the shopper
          example: 1ed768bb-e88a-4636-91ae-67927ccbb02b          
          maximum: 100
        firstName:
          type: string
          description: This is the first name of the shopper
          example: John          
          maximum: 100
        lastName:
          type: string
          maximum: 100
          example: Doe
          description: This is the last name of the shopper
        dateOfBirth: 
          type: string
          minimum: 10
          maximum: 10
          format: date
          description: This is the date of birth of the shopper. Format [YYYY-MM-DD]
    VoucherShopper:
      required:
        - id
        - username
        - firstName
        - lastName
        - dateOfBirth
        - email
      properties:
        id:
          type: string          
          description: This is the unique identifier of the shopper
          example: 1ed768bb-e88a-4636-91ae-67927ccbb02b                    
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          minimum: 36
          maximum: 36
        username:
          type: string          
          description: This is the unique username of the shopper
          example: 1ed768bb-e88a-4636-91ae-67927ccbb02b          
          pattern: '^[A-Za-z0-9 _-]'
          maximum: 100          
        firstName:
          type: string
          description: This is the first name of the shopper
          example: John          
          pattern: '^[A-Za-z -]'
          maximum: 100
        lastName:
          type: string
          maximum: 100
          example: Doe
          pattern: '^[A-Za-z -]'
          description: This is the last name of the shopper
        dateOfBirth: 
          type: string
          minimum: 10
          maximum: 10
          format: date
          description: This is the date of birth of the shopper. Format [YYYY-MM-DD]          
        email:
          type: string
          format: email
          maximum: 100
          example: john.doe@pxpfinancial.com
          description: This is the email address of the shopper          
    Error:
      required:
        - code
        - reason
      properties:
        code:
          type: string
        reason:
          type: string
        details:
          type: array  
          items: {}
    VoucherResponse:
      required:
        - state
        - stateMessage
      properties:
        state:
          type: string
          example: "VoucherCreated"
        stateMessage:
          type: string
          example: "Voucher Created"          
    TransactionResponse:
      required:
        - systemTransactionId
        - state
        - stateMessage
      properties:
        systemTransactionId:
          type: string
          example: 1ed768bb-e88a-4636-91ae-67927ccbb02b                    
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          minimum: 36
          maximum: 36          
        state:
          type: string
          example: "Approved"
        stateMessage:
          type: string
          example: "Approved" 