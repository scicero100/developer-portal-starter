openapi: 3.0.3
servers:
  - url: https://qa-pxp-cagetransactions-api.azurewebsites.net/api/v1
info:
  description: >-
    This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: Unity Internal Services
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: salvatore.cicero@pxpfinancial.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: vouchers
    description: Everything about your Pets
  - name: deposits
    description: Access to Petstore orders
  - name: withdrawals
    description: Operations about user
paths:
  /vouchers: 
    get:
      summary: List all Cage Vouchers
      operationId: listVouchers
      tags:
        - Cage Transactions
      parameters:
        - name: site
          in: query
          description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
          required: true
          schema:
            type: string
            maxLength: 20
            example: "ACM-00000001"
        - name: voucherNumber
          in: query
          description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
          required: true
          schema:
            type: string
            maxLength: 50
            example: "1234567890"
      responses:
        200:
          description: An array of vouchers
          content:
            application/json:
              schema:
                type: object
              examples: 
                Voucher Created:
                  value: 
                    voucherNumber: "1234567890"
                    state: "VoucherCreated"
                    stateMessage: "Voucher Created"
                    amount: 30.33
                    currency: USD
                Voucher Paid:
                  value: 
                    voucherNumber: "1234567890"
                    state: "VoucherPaid"
                    stateMessage: "Voucher Paid"
                    amount: 30.33
                    currency: USD       
                Voucher Expired:
                  value: 
                    voucherNumber: "1234567890"
                    state: "VoucherExpired"                   
                    stateMessage: "Voucher Expired"
                    amount: 30.33
                    currency: USD
  /deposits:
    post:
      summary: Create a Cage Deposit
      operationId: createDeposit
      tags:
        - Cage Transactions
      requestBody:
        description: Create a Cage Deposit
        required: true
        content:
          application/json:
            schema:
              type: object 
              required:
                - site
                - amount
                - currency
                - shopper
                - paymentTypeAmounts
              properties:
                site:
                  description: The unique site identifier, with which you want to process the transaction. This can be for example a store, hotel, a website etc. This value is generated by PXP Financial
                  type: string
                  example: "ACME-0000001"
                  maximum: 20
                amount:
                  description: This is the amount of the transaction.  The numbers after the decimal will be zero padded if they are less than the expected currency exponent i.e. GBP 1.1 = GBP 1.10 OR EUR 1 = EUR 1.00 OR BHD 1.3 = 1.300  The transaction will be rejected if numbers after the decimal are greater than the expected currency exponent i.e. GBP 1.234 OR if a decimal is supplied when the currency of exponent does not require it i.e. JPY 1.0
                  type: number
                  example: 30.33
                currency:
                  description: This is the currency of the transaction. This is the currency code. A three character code in accordance with ISO 4217
                  type: string
                  example: "EUR"
                  minimum: 3
                  maximum: 3
                shopper:
                  type: object 
                  required:
                    - id
                  description: This is the unique identifier of the shopper
                  properties:
                    id:
                      type: string
                      example: "test_shopper_01"
                paymentTypeAmounts:
                  $ref: "#/components/schemas/PaymentTypeAmounts"
      responses:
        200:
          description: Cage Deposit Approved
          content:
            application/json:
              schema:
                type: object
                properties:   
                  systemTransactionId:
                    type: string
                    example: "57bc8107-0482-488d-8c0c-5021042124f2"
                  state:
                    type: string
                    example: "Approved"
                  stateMessage:
                    type: string
                    example: "Approved"                    
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        400:
          description: Invalid Request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  code:
                    type: string                
                    example: "INVALID_REQUEST"
                  reason:
                    type: string                
                    example: "One or more validation errors occurred"
                  details:
                    type: array
                    items: {}
                    example: "'$.voucherNumber' - The voucherNumber field is required"                    
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  responses:
    PetResponse:
      description: successful operation
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
